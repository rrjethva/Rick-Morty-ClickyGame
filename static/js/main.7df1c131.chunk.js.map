{"version":3,"sources":["images/beth.png","images/birdperson.png","images/evilmorty.png","images/gianthead.png","images/goldenford.png","images/jerry.png","images/jessica.png","images/meeseeks.png","images/morty.png","images/mr.png","images/rick.png","images/summer.png","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","a","i","key","Footer","Banner","images","beth","birdperson","evilmorty","gianthead","goldenford","jerry","jessica","meeseeks","morty","mr","rick","summer","ClickyGame","state","allCharacters","shuffleArray","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","setState","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7df1c131.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdperson.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenford.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/meeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/mr.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = props => (\r\n    <div className=\"navbar \">\r\n        <div>Clicky Game</div>\r\n        <div className={props.navMsgColor}>{props.navMessage}</div>\r\n        <div>\r\n            Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './Character.css';\r\n\r\nconst Character = props => (\r\n    <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n        <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n    </div>\r\n);\r\n\r\nexport default Character;","import React from 'react';\r\nimport './Container.css';\r\nimport Character from '../Character';\r\n\r\nconst Container = props => (\r\n    <div className={props.shake ? 'container d-flex flex-wrap justify-content-center shake' : 'container d-flex flex-wrap justify-content-center'}>\r\n        {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\r\n    </div>\r\n);\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => <div className=\"footer text-center\">Ravi Jethva</div>;\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Banner.css';\r\n\r\nconst Banner = () => (\r\n    <div className=\"banner text-center d-flex align-items-center justify-content-center\">\r\n        <p className=\"m-0\">Click on an image to earn points, but don't click on any more than once!</p>\r\n    </div>\r\n);\r\n\r\nexport default Banner;","import beth from './images/beth.png';\r\nimport birdperson from './images/birdperson.png';\r\nimport evilmorty from './images/evilmorty.png';\r\nimport gianthead from './images/gianthead.png';\r\nimport goldenford from './images/goldenford.png';\r\nimport jerry from './images/jerry.png';\r\nimport jessica from './images/jessica.png';\r\nimport meeseeks from './images/meeseeks.png';\r\nimport morty from './images/morty.png';\r\nimport mr from './images/mr.png';\r\nimport rick from './images/rick.png';\r\nimport summer from './images/summer.png';\r\n\r\nconst images = [\r\n    beth,\r\n    birdperson,\r\n    evilmorty,\r\n    gianthead,\r\n    goldenford,\r\n    jerry,\r\n    jessica,\r\n    meeseeks,\r\n    morty,\r\n    mr,\r\n    rick,\r\n    summer\r\n];\r\n\r\nexport default images;\r\n","import React, { Component } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\nimport Banner from './Banner';\r\nimport images from '../images';\r\n\r\nclass ClickyGame extends Component {\r\n    state = {\r\n        score: 0,\r\n        highScore: 0,\r\n\r\n        // stores the class value to assign to navMessage based on a good or bad click\r\n        navMsgColor: '',\r\n\r\n        // contains intro, success, and failure message\r\n        navMessage: 'Click an image to begin!',\r\n\r\n        // contains an array of image urls\r\n        allCharacters: this.shuffleArray(),\r\n\r\n        // will track  each clicked element.\r\n        wasClicked: [],\r\n\r\n        // shakes the container on an incorrect guess if set to true\r\n        shake: false\r\n    };\r\n\r\n    // binds the current this context to checkClicked to have access to the current state\r\n    // when passed down to the Character component\r\n    clickEvent = this.checkClicked.bind(this);\r\n\r\n    // used to shuffle the array of images when the DOM loads, and when an image is clicked\r\n    shuffleArray() {\r\n        // creates a copy of the current characters array to modify it by value, and not by reference\r\n        const newArr = images.slice();\r\n\r\n        // will store the shuffled array\r\n        const shuffleArr = [];\r\n\r\n        // each loop through an index gets spliced from newArr, reducing its length\r\n        // gets a random index based off the current length of newArr\r\n        // splices the value from newArr, and pushes it to shuffleArr\r\n        while (newArr.length > 0) {\r\n            shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\r\n        }\r\n\r\n        return shuffleArr;\r\n    }\r\n\r\n    checkClicked(clickedElem) {\r\n        // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\r\n        const prevState = this.state.wasClicked.slice();\r\n\r\n        // shuffles the images\r\n        const shuffled = this.shuffleArray();\r\n\r\n        // tracks score\r\n        let score = this.state.score;\r\n        let highScore = this.state.highScore;\r\n\r\n        // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\r\n        if (!this.state.wasClicked.includes(clickedElem)) {\r\n            // if score and highScore are the same, then there is a new highScore value\r\n            if (score === highScore) {\r\n                score++;\r\n                highScore++;\r\n\r\n                // if they are not equal, then only increase the score value\r\n            } else {\r\n                score++;\r\n            }\r\n\r\n            // adds the clicked item to wasClicked to track that it has been clicked\r\n            prevState.push(clickedElem);\r\n        }\r\n\r\n        // resets the current score if the same element was clicked twice\r\n        if (this.state.wasClicked.includes(clickedElem)) {\r\n            let score = 0;\r\n            return this.setState({\r\n                score: score,\r\n                highScore: highScore,\r\n                navMsgColor: 'incorrect',\r\n                navMessage: 'Incorrect guess!',\r\n                allCharacters: shuffled,\r\n                wasClicked: [],\r\n                shake: true\r\n            });\r\n        }\r\n\r\n        // if this runs, then the same element has not been clicked twice and the score is increased\r\n        this.setState({\r\n            score: score,\r\n            highScore: highScore,\r\n            navMsgColor: 'correct',\r\n            navMessage: 'You Guessed Correctly!',\r\n            allCharacters: shuffled,\r\n            wasClicked: prevState,\r\n            shake: false\r\n        });\r\n\r\n        // removes the green correct indicator on a successful click after .5s to re-render the class on each success\r\n        return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\r\n    }\r\n\r\n    // renders score to the navbar.\r\n    // passes the randomized state.allCharacters array to Container to create a Character component for each image.\r\n    // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\r\n    render() {\r\n        const state = this.state;\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    score={state.score}\r\n                    highScore={state.highScore}\r\n                    navMessage={state.navMessage}\r\n                    navMsgColor={state.navMsgColor}\r\n                />\r\n                <Banner />\r\n                <Container\r\n                    shake={state.shake}\r\n                    characters={state.allCharacters}\r\n                    clickEvent={this.clickEvent}\r\n                />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClickyGame;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n"],"sourceRoot":""}